@model HomeSchoolDayBook.Models.ViewModels.EntryCreateEditVM

<a asp-page="../Students/Create">Create New Student</a> <br>
<a asp-page="../Subjects/Create">Create New Subject</a>
<hr />
<form id="entry-form" method="post" class="sidemargins">
    <div asp-validation-summary="ModelOnly" class="text-danger">
    </div>
    <div class="row">
        <div class="form-group col-md-6 col-sm-8">
            <label asp-for="Title" class="control-label"></label>
            <input asp-for="Title" class="form-control" placeholder="Entry title" autofocus />
            <span asp-validation-for="Title" class="text-danger"></span>
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-2 col-sm-3 col-xs-5">
            <label asp-for="Date" class="control-label"></label>
            <input asp-for="Date" type="text" class="form-control" />
            <span asp-validation-for="Date" class="text-danger"></span>
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-6 col-sm-8">
            <label asp-for="Description" class="control-label"></label>
            <textarea asp-for="Description" class="form-control" placeholder="Entry details"></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-6">
            <label class="control-label">Time Spent</label>
        </div>
    </div>
    <div class="form-group row">
        <div class="col-sm-2 col-xs-4">
            <input type="text" asp-for="Hours" class="form-control" placeholder="Hours" />
            <span asp-validation-for="Hours" class="text-danger"></span>
        </div>
        <div class="col-sm-2 col-xs-4">
            <input type="text" asp-for="Minutes" class="form-control" placeholder="Minutes" />
            <span asp-validation-for="Minutes" class="text-danger"></span>
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-8 col-sm-10">
            <label asp-for="StudentCheckBoxes" class="control-label"></label>
            <p class="text-danger">@Model.NoStudentsMessage </p>
            <div class="row">
                @for (int i = 0; i < Model.StudentCheckBoxes.Count; i++)
                {
                    var checkbox = Model.StudentCheckBoxes[i];

                    string isChecked = checkbox.Assigned ? "checked" : "";

                    <div class="col-sm-4">
                        <label class="notbold">
                            <input type="checkbox"
                                   name="selectedStudents"
                                   id=@($"studentCheck{i}")
                                   data-studentname="@checkbox.Name"
                                   onclick="displayStudentSubjectPairs()"
                                   value="@checkbox.ID" @isChecked />@checkbox.Name
                            </label>
                        </div>
                    }
            </div>
        </div>
    </div>
    <div class="row">
        <div class="form-group col-md-8 col-sm-10">
            <label asp-for="SubjectCheckBoxes" class="control-label"></label>
            <p class="text-danger">@Model.NoSubjectsMessage</p>
            <div class="row">
                @for (int i = 0; i < Model.SubjectCheckBoxes.Count; i++)
                {
                    var checkbox = Model.SubjectCheckBoxes[i];

                    string isChecked = checkbox.Assigned ? "checked" : "";
                    <div class="col-sm-4">
                        <label class="notbold">
                            <input type="checkbox"
                                   name="selectedSubjects"
                                   data-subjectname="@checkbox.Name"
                                   id=@($"subjectCheck{i}")
                                   onclick="displayStudentSubjectPairs()"
                                   value="@checkbox.ID"
                                   @isChecked />
                            @checkbox.Name
                        </label>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-6">
            <label class="control-label">Assign Grades for this Entry</label>
        </div>
    </div>
    <div id="grades-header" class="row">
    </div>
    <div id="grades-container" class="topmargins"></div>
    <div class="row">
        <div class="form-group col-xs-12 topmargins">
            <input type="button" onclick="saveEntry()" value="Save" class="btn btn-default" /> |
            <a asp-page="./Index">My Entries</a>
        </div>
    </div>
</form>

<script src="~/lib/datepicker/bootstrap-datepicker.js"></script>
<script src="~/js/site.js"></script>

<script type="text/javascript">

    function displayStudentSubjectPairs() {
        var savedGrades = @Html.Raw(Model.GradesJSON);

        var studentCheckboxes = document.getElementsByName("selectedStudents");
        var subjectCheckboxes = document.getElementsByName("selectedSubjects");

        var gradesHeader = document.getElementById("grades-header");
        while (gradesHeader.hasChildNodes()) {
            gradesHeader.removeChild(gradesHeader.lastChild);
        }

        var gradesContainer = document.getElementById("grades-container");
        while (gradesContainer.hasChildNodes()) {
            gradesContainer.removeChild(gradesContainer.lastChild);
        }

        var showHeader = false;

        for (var i = 0; i < studentCheckboxes.length; i++) {
            for (var j = 0; j < subjectCheckboxes.length; j++) {
                if (studentCheckboxes[i].checked === true && subjectCheckboxes[j].checked === true) {
                    showHeader = true;

                    var singleGradeRow = document.createElement("div");
                    singleGradeRow.className = "form-group row";

                    var studentCaptionCol = document.createElement("div");
                    studentCaptionCol.className = "col-xs-3 col-md-2";

                    var studentCaption = document.createElement("label");
                    studentCaption.innerText = studentCheckboxes[i].dataset.studentname;
                    studentCaption.className = "form-control-static notbold";

                    studentCaptionCol.appendChild(studentCaption);

                    var subjectCaptionCol = document.createElement("div");
                    subjectCaptionCol.className = "col-xs-3 col-md-2";

                    var subjectCaption = document.createElement("label");
                    subjectCaption.innerText = subjectCheckboxes[j].dataset.subjectname;
                    subjectCaption.className = "form-control-static notbold";

                    subjectCaptionCol.appendChild(subjectCaption);

                    var pointsEarnedCol = document.createElement("div");
                    pointsEarnedCol.className = "col-xs-3 col-sm-2 input-column";

                    var pointsEarnedTextbox = document.createElement("input");
                    pointsEarnedTextbox.type = "text";
                    var pointsEarnedTextboxName = "earned-student-" + studentCheckboxes[i].value + "-subject-" + subjectCheckboxes[j].value;
                    pointsEarnedTextbox.name = pointsEarnedTextboxName;
                    pointsEarnedTextbox.className = "form-control input-grade";
                    if (savedGrades.hasOwnProperty(pointsEarnedTextboxName)) {
                        pointsEarnedTextbox.value = savedGrades[pointsEarnedTextboxName];
                    }                     
                   
                    pointsEarnedCol.appendChild(pointsEarnedTextbox);

                    var pointsAvailableCol = document.createElement("div");
                    pointsAvailableCol.className = "col-xs-3 col-sm-2 input-column";

                    var pointsAvailableTextbox = document.createElement("input");
                    pointsAvailableTextbox.type = "text";
                    var pointsAvailableTextboxName = "available-student-" + studentCheckboxes[i].value + "-subject-" + subjectCheckboxes[j].value;
                    pointsAvailableTextbox.name = pointsAvailableTextboxName;
                    pointsAvailableTextbox.className = "form-control input-grade";
                    if (savedGrades.hasOwnProperty(pointsAvailableTextboxName)) {
                        pointsAvailableTextbox.value = savedGrades[pointsAvailableTextboxName];
                    }

                    pointsAvailableCol.appendChild(pointsAvailableTextbox);

                    singleGradeRow.appendChild(studentCaptionCol);
                    singleGradeRow.appendChild(subjectCaptionCol);
                    singleGradeRow.appendChild(pointsEarnedCol);
                    singleGradeRow.appendChild(pointsAvailableCol);

                    gradesContainer.appendChild(singleGradeRow);
                }
            }
        }
        if (showHeader === true) {
            var pointsEarnedHeader = document.createElement("div");
            pointsEarnedHeader.className = "text-center col-xs-offset-6 col-md-offset-4 col-xs-3 col-sm-2";
            pointsEarnedHeader.innerText = "Points Earned";

            var pointsAvailableHeader = document.createElement("div");
            pointsAvailableHeader.className = "text-center col-xs-3 col-sm-2";
            pointsAvailableHeader.innerText = "Points Available";

            gradesHeader.appendChild(pointsEarnedHeader);
            gradesHeader.appendChild(pointsAvailableHeader);
        } else {
            var noGradesDiv = document.createElement("div");
            noGradesDiv.className = "alert alert-info";

            var noGradesParagraph = document.createElement("p");
            noGradesParagraph.innerText = "Grades for each student can be assigned for each subject. " +
                "Select at least one student and at least one subject to enter grades.";

            noGradesDiv.appendChild(noGradesParagraph);
            gradesHeader.appendChild(noGradesDiv);
        }
    }

    function saveEntry() {
        var form = document.getElementById('entry-form');
        var $form = $(form);

        //if client-side grade validation is turned off for testing of server-side validation, don't forget to turn it back on!!!
        //var isValidGrades = true;
        var isValidGrades = validateGrades();
        var isValidForm = $form.valid();
        if (isValidForm && isValidGrades) {
            $form.submit();
        }
    }

    function validateGrades() {
        var grades = document.getElementsByClassName('input-grade');
        var gradesAreValid = true;

        for (var i = 0; i < grades.length; i++) {
            var gradeColumn = grades[i].parentElement;
            while (grades[i].nextSibling) {
                gradeColumn.removeChild(gradeColumn.lastChild);
            }

            var gradeValue = grades[i].value;

            if (grades[i].name.startsWith("earned")) {
                if (gradeValue !== '' && isNaN(gradeValue)) {
                    gradesAreValid = false;
                    var validationMessageEarned = document.createElement('p');
                    validationMessageEarned.innerText = 'The Points Earned field must be a number.';
                    validationMessageEarned.style.color = '#a94442';
                    gradeColumn.appendChild(validationMessageEarned);
                }
            } else if (grades[i].name.startsWith("available")) {
                if (gradeValue !== '' && (isNaN(gradeValue) || gradeValue <= 0)) {
                    gradesAreValid = false;
                    var validationMessageAvailable = document.createElement('p');
                    validationMessageAvailable.innerText = 'The Points Available field must be a number greater than zero.';
                    validationMessageAvailable.style.color = '#a94442';
                    gradeColumn.appendChild(validationMessageAvailable);
                }
            }

            if (gradeValue === '') {
                if (grades[i].name.startsWith("earned")) {
                    var partnerFieldName = grades[i].name.replace("earned", "available");
                } else if (grades[i].name.startsWith("available")) {
                    partnerFieldName = grades[i].name.replace("available", "earned");
                }

                var partnerField = document.getElementsByName(partnerFieldName);

                if (partnerField[0].value !== '') {
                    gradesAreValid = false;
                    var validationMessageNotBlank = document.createElement('p');
                    validationMessageNotBlank.innerText = "Both parts of the grade (points earned and points available) must be entered.";
                    validationMessageNotBlank.style.color = '#a94442';
                    gradeColumn.appendChild(validationMessageNotBlank);
                }
            }
        }
        return gradesAreValid;
    }

    $(document).ready(function () {
        $("#Date").datepicker({
            orientation: "bottom"
        });
    });

    $(document).ready(displayStudentSubjectPairs());
</script>
